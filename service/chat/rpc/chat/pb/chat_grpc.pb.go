// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: chat.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	MessageSave(ctx context.Context, in *MsgSaveReq, opts ...grpc.CallOption) (*Rsp, error)
	MessageList(ctx context.Context, in *MsgListReq, opts ...grpc.CallOption) (*MsgListRsp, error)
	ChatHistoryList(ctx context.Context, in *ChatHistoryReq, opts ...grpc.CallOption) (*ChatHistoryRsp, error)
	ChatNumber(ctx context.Context, in *ChatNumberReq, opts ...grpc.CallOption) (*ChatNumberRsp, error)
	ChatHistorySave(ctx context.Context, in *CHSaveReq, opts ...grpc.CallOption) (*Rsp, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) MessageSave(ctx context.Context, in *MsgSaveReq, opts ...grpc.CallOption) (*Rsp, error) {
	out := new(Rsp)
	err := c.cc.Invoke(ctx, "/chat.Chat/MessageSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) MessageList(ctx context.Context, in *MsgListReq, opts ...grpc.CallOption) (*MsgListRsp, error) {
	out := new(MsgListRsp)
	err := c.cc.Invoke(ctx, "/chat.Chat/MessageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ChatHistoryList(ctx context.Context, in *ChatHistoryReq, opts ...grpc.CallOption) (*ChatHistoryRsp, error) {
	out := new(ChatHistoryRsp)
	err := c.cc.Invoke(ctx, "/chat.Chat/ChatHistoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ChatNumber(ctx context.Context, in *ChatNumberReq, opts ...grpc.CallOption) (*ChatNumberRsp, error) {
	out := new(ChatNumberRsp)
	err := c.cc.Invoke(ctx, "/chat.Chat/ChatNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ChatHistorySave(ctx context.Context, in *CHSaveReq, opts ...grpc.CallOption) (*Rsp, error) {
	out := new(Rsp)
	err := c.cc.Invoke(ctx, "/chat.Chat/ChatHistorySave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	MessageSave(context.Context, *MsgSaveReq) (*Rsp, error)
	MessageList(context.Context, *MsgListReq) (*MsgListRsp, error)
	ChatHistoryList(context.Context, *ChatHistoryReq) (*ChatHistoryRsp, error)
	ChatNumber(context.Context, *ChatNumberReq) (*ChatNumberRsp, error)
	ChatHistorySave(context.Context, *CHSaveReq) (*Rsp, error)
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) MessageSave(context.Context, *MsgSaveReq) (*Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSave not implemented")
}
func (UnimplementedChatServer) MessageList(context.Context, *MsgListReq) (*MsgListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageList not implemented")
}
func (UnimplementedChatServer) ChatHistoryList(context.Context, *ChatHistoryReq) (*ChatHistoryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatHistoryList not implemented")
}
func (UnimplementedChatServer) ChatNumber(context.Context, *ChatNumberReq) (*ChatNumberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatNumber not implemented")
}
func (UnimplementedChatServer) ChatHistorySave(context.Context, *CHSaveReq) (*Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatHistorySave not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_MessageSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).MessageSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/MessageSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).MessageSave(ctx, req.(*MsgSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_MessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).MessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/MessageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).MessageList(ctx, req.(*MsgListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ChatHistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ChatHistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/ChatHistoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ChatHistoryList(ctx, req.(*ChatHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ChatNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ChatNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/ChatNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ChatNumber(ctx, req.(*ChatNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ChatHistorySave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CHSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ChatHistorySave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/ChatHistorySave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ChatHistorySave(ctx, req.(*CHSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MessageSave",
			Handler:    _Chat_MessageSave_Handler,
		},
		{
			MethodName: "MessageList",
			Handler:    _Chat_MessageList_Handler,
		},
		{
			MethodName: "ChatHistoryList",
			Handler:    _Chat_ChatHistoryList_Handler,
		},
		{
			MethodName: "ChatNumber",
			Handler:    _Chat_ChatNumber_Handler,
		},
		{
			MethodName: "ChatHistorySave",
			Handler:    _Chat_ChatHistorySave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
