#etcd
apiVersion: v1
kind: Endpoints
metadata:
  name: etcd
  namespace: acger
subsets:
  - addresses:
      - ip: 192.168.93.133
    ports:
      - port: 2379

---
apiVersion: v1
kind: Service
metadata:
  name: etcd
  namespace: acger
spec:
  ports:
    - port: 2379

---
#tidb
apiVersion: v1
kind: Endpoints
metadata:
  name: tidb
  namespace: acger
subsets:
  - addresses:
      - ip: 192.168.93.133
    ports:
      - port: 4000

---
apiVersion: v1
kind: Service
metadata:
  name: tidb
  namespace: acger
spec:
  ports:
    - port: 4000

---
#redis
apiVersion: v1
kind: Endpoints
metadata:
  name: redis
  namespace: acger
subsets:
  - addresses:
      - ip: 192.168.93.133
    ports:
      - port: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: acger
spec:
  ports:
    - port: 6379

---
#kafka
apiVersion: v1
kind: Endpoints
metadata:
  name: kafka
  namespace: acger
subsets:
  - addresses:
      - ip: 192.168.93.133
    ports:
      - port: 9092

---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: acger
spec:
  ports:
    - port: 9092

---
#elasticsearch
apiVersion: v1
kind: Endpoints
metadata:
  name: elasticsearch
  namespace: acger
subsets:
  - addresses:
      - ip: 192.168.93.133
    ports:
      - port: 9200

---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: acger
spec:
  ports:
    - port: 9200


---
#jaeger
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.26.1 (a9d05d509)
  creationTimestamp: null
  labels:
    io.kompose.service: jaeger
  name: jaeger
  namespace: acger
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: jaeger
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.26.1 (a9d05d509)
      creationTimestamp: null
      labels:
        io.kompose.service: jaeger
    spec:
      containers:
        - args:
            - '--memory.max-traces=10000'
          env:
            - name: LOG_LEVEL
              value: debug
            - name: SPAN_STORAGE_TYPE
              value: memory
          image: jaegertracing/all-in-one:latest
          name: jaeger
          ports:
            - containerPort: 5775
              protocol: UDP
            - containerPort: 6831
              protocol: UDP
            - containerPort: 6832
              protocol: UDP
            - containerPort: 5778
            - containerPort: 16686
            - containerPort: 14268
            - containerPort: 9411
          resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.26.1 (a9d05d509)
  creationTimestamp: null
  labels:
    io.kompose.service: jaeger
  name: jaeger
  namespace: acger
spec:
  ports:
    - name: "5775"
      port: 5775
      protocol: UDP
      targetPort: 5775
    - name: "6831"
      port: 6831
      protocol: UDP
      targetPort: 6831
    - name: "6832"
      port: 6832
      protocol: UDP
      targetPort: 6832
    - name: "5778"
      port: 5778
      targetPort: 5778
    - name: "16686"
      port: 16686
      targetPort: 16686
    - name: "14268"
      port: 14268
      targetPort: 14268
    - name: "9411"
      port: 9411
      targetPort: 9411
  selector:
    io.kompose.service: jaeger
status:
  loadBalancer: {}


---
#prometheus
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: prometheus-claim1
  name: prometheus-claim1
  namespace: acger
spec:
  storageClassName: "local-path"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 300Mi
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.26.1 (a9d05d509)
  creationTimestamp: null
  labels:
    io.kompose.service: prometheus
  name: prometheus
  namespace: acger
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: prometheus
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.26.1 (a9d05d509)
      creationTimestamp: null
      labels:
        io.kompose.service: prometheus
    spec:
      containers:
        - args:
            - --config.file=/etc/prometheus/config/prometheus.yml
            - --storage.tsdb.path=/prometheus
          env:
            - name: TZ
              value: Asia/Shanghai
          image: prom/prometheus:latest
          name: prometheus
          ports:
            - containerPort: 9090
          resources: {}
          volumeMounts:
            - mountPath: /etc/prometheus/config
              name: config
            - mountPath: /prometheus
              name: prometheus-claim1
      restartPolicy: Always
      volumes:
        - name: config
          configMap:
            name: acger-config
            items:
              - key: "prometheus.yml"
                path: "prometheus.yml"
        - name: prometheus-claim1
          persistentVolumeClaim:
            claimName: prometheus-claim1
status: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.26.1 (a9d05d509)
  creationTimestamp: null
  labels:
    io.kompose.service: prometheus
  name: prometheus
  namespace: acger
spec:
  ports:
    - name: "9090"
      port: 9090
      targetPort: 9090
  selector:
    io.kompose.service: prometheus
status:
  loadBalancer: {}

---
#grafana
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: grafana-claim0
  name: grafana-claim0
  namespace: acger
spec:
  storageClassName: "local-path"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 300Mi
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.26.1 (a9d05d509)
  creationTimestamp: null
  labels:
    io.kompose.service: grafana
  name: grafana
  namespace: acger
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: grafana
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.26.1 (a9d05d509)
      creationTimestamp: null
      labels:
        io.kompose.service: grafana
    spec:
      containers:
        - env:
            - name: TZ
              value: Asia/Shanghai
          image: grafana/grafana:latest
          name: grafana
          ports:
            - containerPort: 3000
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-claim0
      hostname: grafana
      restartPolicy: Always
      volumes:
        - name: grafana-claim0
          persistentVolumeClaim:
            claimName: grafana-claim0
status: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.26.1 (a9d05d509)
  creationTimestamp: null
  labels:
    io.kompose.service: grafana
  name: grafana
  namespace: acger
spec:
  ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
  selector:
    io.kompose.service: grafana
status:
  loadBalancer: {}
